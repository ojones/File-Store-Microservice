package main

import (
	"io"

	"github.com/stretchr/testify/mock"
)

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

// removeFile provides a mock function with given fields: filepath
func (_m *MockStorer) removeFile(filepath string) error {
	ret := _m.Called(filepath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getFile provides a mock function with given fields: filepath
func (_m *MockStorer) getFile(filepath string) ([]byte, int64, error) {
	ret := _m.Called(filepath)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filepath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(string) int64); ok {
		r1 = rf(filepath)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(filepath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// listFiles provides a mock function with given fields: folderpath
func (_m *MockStorer) listFiles(folderpath string) ([]byte, error) {
	ret := _m.Called(folderpath)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(folderpath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folderpath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// addFile provides a mock function with given fields: filename, folderpath, file
func (_m *MockStorer) addFile(filename string, folderpath string, file io.Reader) error {
	ret := _m.Called(filename, folderpath, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) error); ok {
		r0 = rf(filename, folderpath, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
